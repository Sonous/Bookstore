import React, { useState, useRef } from 'react';
import './ForgetForm.css'; // T·∫°o file CSS ri√™ng ƒë·ªÉ t√πy ch·ªânh giao di·ªán



const ForgetForm = ({ onClose }) => {

  const [step, setStep] = useState(1); // Qu·∫£n l√Ω c√°c b∆∞·ªõc
  const [method, setMethod] = useState(null); // Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
  const [emailOrPhone, setEmailOrPhone] = useState(''); // L∆∞u th√¥ng tin email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
  const [otp, setOtp] = useState(Array(6).fill('')); // L∆∞u OTP
  const [newPassword, setNewPassword] = useState(''); // L∆∞u m·∫≠t kh·∫©u m·ªõi
  const [confirmPassword, setConfirmPassword] = useState(''); // L∆∞u m·∫≠t kh·∫©u x√°c nh·∫≠n

  const otpRefs = useRef([]); // T·∫°o m·∫£ng refs ƒë·ªÉ qu·∫£n l√Ω c√°c √¥ OTP

  const handleMethodSelect = (method) => {
    setMethod(method);
    setStep(2); // Chuy·ªÉn sang b∆∞·ªõc nh·∫≠p th√¥ng tin
  };

  const handleSubmit = () => {
    if (step === 2) {
      setStep(3); // Chuy·ªÉn sang b∆∞·ªõc nh·∫≠p OTP
    } else if (step === 3) {
      setStep(4); // Chuy·ªÉn sang b∆∞·ªõc t·∫°o m·∫≠t kh·∫©u
    } else if (step === 4) {
      if (newPassword === confirmPassword) {
        alert('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng');
        onClose(); // ƒê√≥ng pop-up khi ho√†n t·∫•t
      } else {
        alert('M·∫≠t kh·∫©u kh√¥ng kh·ªõp!');
      }
    }
  };

  // X·ª≠ l√Ω nh·∫≠p OTP v√† chuy·ªÉn √¥ ti·∫øp theo
  const handleOtpChange = (e, index) => {
    const value = e.target.value;
    if (/^[0-9]$/.test(value)) {
      const newOtp = [...otp];
      newOtp[index] = value;
      setOtp(newOtp);
      
      // Chuy·ªÉn sang √¥ ti·∫øp theo n·∫øu c√≥
      if (index < 5 && value !== '') {
        otpRefs.current[index + 1].focus();
      }
    }
  };

  return (
    <div className="forget-form-overlay">
      <div className="forget-form-container">
        <button className="close-btn" onClick={onClose}>X</button> {/* N√∫t tho√°t */}
        
        {step === 1 && (
          <div className="popup-step">
            <h2>Qu√™n m·∫≠t kh·∫©u</h2>
            <div className="method-buttons">
              <button onClick={() => handleMethodSelect('email')}>üìß Email</button>
              <button onClick={() => handleMethodSelect('phone')}>üì± S·ªë ƒëi·ªán tho·∫°i</button>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="popup-step">
            <h3>Qu√™n m·∫≠t kh·∫©u</h3>
            <div className="form-row">
              <h5>{method === 'email' ? 'Email' : 'S·ªë ƒëi·ªán tho·∫°i'}:</h5> 
              
              <input 
                type="text"
                value={emailOrPhone}
                onChange={(e) => setEmailOrPhone(e.target.value)}
                placeholder={`ƒêi·ªÅn ${method === 'email' ? 'email' : 's·ªë ƒëi·ªán tho·∫°i'}`}
              /> 
              </div>
              <button className='btn' onClick={handleSubmit}>L·∫•y m√£</button>
            
          </div>
        )}

        {step === 3 && (
          <div className="popup-step">
            <h3>Nh·∫≠p m√£ OTP</h3> <br />
            <p>Vui l√≤ng nh·∫≠p m√£ OTP t·ª´ {method === 'email' ? 'email' : 's·ªë ƒëi·ªán tho·∫°i'} c·ªßa b·∫°n.</p>
            <div className="otp-inputs">
              {[...Array(6)].map((_, index) => (
                <input
                  key={index}
                  ref={(el) => otpRefs.current[index] = el} // G√°n ref cho t·ª´ng √¥ input
                  type="text"
                  maxLength="1"
                  value={otp[index]}
                  onChange={(e) => handleOtpChange(e, index)}
                  onKeyUp={(e) => {
                    if (e.key === 'Backspace' && index > 0 && otp[index] === '') {
                      otpRefs.current[index - 1].focus(); // Quay l·∫°i √¥ tr∆∞·ªõc ƒë√≥ khi nh·∫•n Backspace
                    }
                  }}
                />
              ))}
            </div>
            <p>B·∫°n ch∆∞a nh·∫≠n ƒë∆∞·ª£c m√£? <a href="#">G·ª≠i l·∫°i</a></p>
            <button className='btn' onClick={handleSubmit}>X√°c nh·∫≠n</button>
          </div>
        )}

        {step === 4 && (
          <div className="popup-step">
            <h3>T·∫°o m·∫≠t kh·∫©u m·ªõi</h3>
            <div className='form-row'>
              <h5>M·∫≠t kh·∫©u m·ªõi:&emsp;&nbsp;</h5>
              <input
                type="password"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
              />
            </div>
            <div className='form-row'>
              <h5>Nh·∫≠p l·∫°i m·∫≠t kh·∫©u:</h5>
              <input
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
              />
            </div>
            <button className='btn' onClick={handleSubmit}>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</button>
          </div>
        )}
      </div>
    </div>
  );
};


export default ForgetForm;

